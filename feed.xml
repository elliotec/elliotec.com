<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>elliotec | Software Development</title>
  <subtitle></subtitle>
  <id>http://elliotec.com/</id>
  <link href="http://elliotec.com/"/>
  <link href="http://elliotec.com/feed.xml" rel="self"/>
  <updated>2017-01-30T22:13:00-07:00</updated>
  <author>
    <name>Michael Elliott</name>
  </author>
  <entry>
    <title>Force-directed relationship graph with D3.js and the Spotify Web API</title>
    <link rel="alternate" href="http://elliotec.com/force-directed-artist-relationship-graph-with-d3-js-and-the-spotify-api/"/>
    <id>http://elliotec.com/force-directed-artist-relationship-graph-with-d3-js-and-the-spotify-api/</id>
    <published>2017-01-30T22:13:00-07:00</published>
    <updated>2017-02-26T23:40:25-07:00</updated>
    <author>
      <name>Michael Elliott</name>
    </author>
    <content type="html">&lt;p&gt;I&amp;rsquo;ve always loved data visualization done well and admired interactive graphs and maps seen on &lt;a href="https://www.nytimes.com/interactive/2016/12/21/upshot/Mapping-the-Shadows-of-New-York-City.html"&gt;The New York Times&lt;/a&gt; and elsewhere.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://d3js.org/"&gt;D3.js&lt;/a&gt; is a powerful data visualization library in JavaScript written by the former editor of the New York Times graphics department. It uses a jQuery-like syntax to create and manipulate interactive charts on the web.&lt;/p&gt;

&lt;p&gt;I finally made an excuse for myself to take a couple days and learn what D3 is all about in the form of a web app that maps a &lt;a href="https://en.wikipedia.org/wiki/Force-directed_graph_drawing"&gt;force-directed graph&lt;/a&gt; of related artists to the artist the user inputs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://elliotec.com/visuify"&gt;
    &lt;img src="../images/visuify.png"/&gt;
    &lt;h2&gt;PLAY WITH VISUIFY&lt;/h2&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click the link above to play around with it. Open the artist page in Spotify by clicking the artist name above the chart and hovering, clicking, and dragging the nodes and links do stuff too.&lt;/p&gt;

&lt;p&gt;The flow of the program is:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;User inputs and submits the name of an artist&lt;/li&gt;
&lt;li&gt;A query for the artist is made to the &lt;a href="https://developer.spotify.com/web-api/"&gt;Spotify Web API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The artist is stored, and another request is made for that artist&amp;rsquo;s related artists&lt;/li&gt;
&lt;li&gt;Each related artist to the original query is stored along with their relationships, and another request is made for the second degree of related artists to the original - that is, the related artists of each related artist to the original query&lt;/li&gt;
&lt;li&gt;Nodes and Links are drawn by D3 with specified interactions and styles based on the objects built in the previous step&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The most difficult part was structuring the data properly synchronously before executing D3 to draw the graph from it. I enlisted help from a few friends and my buddy Michal Scienski helped me get the promise chain to work properly, so kudos to him.&lt;/p&gt;

&lt;p&gt;After the data structure was sorted out, it was pretty fast and fun to get D3 to do what I wanted with it. Between the excellent documentation and the &lt;a href="https://gist.github.com/mbostock"&gt;creator&amp;rsquo;s examples&lt;/a&gt;, I was able to build most of the features and functionality I wanted in a couple spare evenings. It was quickly apparent how powerful D3 can be and how many useful applications it has.&lt;/p&gt;

&lt;p&gt;Ideas for its future include routing by artist query and rewriting it in ES-Latest without jQuery or Lodash.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/elliotec/visuify"&gt;See the code on Github&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Modules and Monoliths</title>
    <link rel="alternate" href="http://elliotec.com/modules-and-monoliths/"/>
    <id>http://elliotec.com/modules-and-monoliths/</id>
    <published>2016-02-20T20:06:00-07:00</published>
    <updated>2017-02-26T23:40:25-07:00</updated>
    <author>
      <name>Michael Elliott</name>
    </author>
    <content type="html">&lt;p&gt;&lt;em&gt;&amp;ldquo;Jack of all trades, master of none &amp;ndash; though oftentimes better than
master of one.&amp;rdquo; - Someone&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;The Full Stack Developer&lt;/h2&gt;

&lt;p&gt;Those words are met with controversy in the industry.&lt;/p&gt;

&lt;p&gt;A lot of developers are quite annoyed with the term. They argue that it
 isn&amp;rsquo;t possible to be truly full stack, whatever their definition of
 &amp;ldquo;truly&amp;rdquo; might be.&lt;/p&gt;

&lt;p&gt;They believe that mastery of a specific skill set within a software
stack is more valuable than being decent at all of it. This can be true,
especially in large corporations and enterprise systems with hundreds of
developers that are assigned specific tasks and siloed by their
specialization.&lt;/p&gt;

&lt;p&gt;Mastering one specific language or piece of the stack certainly has many
benefits. Masters of JavaScript have tons of knowledge about the quirks of
the language and clever ways to get complex UIs to do their and the user&amp;rsquo;s
bidding. Likewise with DBAs and data architects on the other side;
structuring huge amounts of data and connecting the data by its
relationships is quite an impressive feat.&lt;/p&gt;

&lt;p&gt;But if the JavaScript master had to analyze and structure and join and
relate tables, she feels out of her element and may seize up citing
ignorance in all things non-JavaScript. The DBA might say, &amp;ldquo;this isn&amp;rsquo;t
SQL.&amp;rdquo; And leave.&lt;/p&gt;

&lt;p&gt;Some people take the love and science of the craft very seriously and
aspire to reach sensei-level software mastery, and think this usually
requires a specialization to get anywhere.&lt;/p&gt;

&lt;p&gt;But looking at examples like David Hienemer Hansson and
hundreds of other startup founders and programming legends, we can see
that gaining that level of knowledge of the full stack is attainable and
accessible and rewarding.&lt;/p&gt;

&lt;p&gt;People can be modules or monoliths. Many choose specialization and corner themselves as &amp;ldquo;JavaScript Developers&amp;rdquo; or &amp;ldquo;Rails Developers.&amp;rdquo; My advice is to stay away from this and keep your options open with something like &amp;ldquo;software developer,&amp;rdquo; highlighting your experience in your preferred fields without removing yourself from opportunities to grow and gain new technical skills.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://dilbertblog.typepad.com/the_dilbert_blog/2007/07/career-advice.html"&gt;Some of the best career advice I&amp;rsquo;ve read came from Scott Adams which says that in order to become extraordinary, you have two paths:&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Become the best at one specific thing.&lt;/li&gt;
&lt;li&gt;Become very good at two or more things.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The first is almost impossible, so I&amp;rsquo;ll be sticking to the second.&lt;/p&gt;

&lt;p&gt;People often tout the &amp;ldquo;T-shaped&amp;rdquo; metaphor for one&amp;rsquo;s skill levels,
meaning that they have expertise in a vertical and the horizontal is the
broad but lesser knowledge of other disciplines. I agree with this, and
don&amp;rsquo;t see why it can&amp;rsquo;t be more common for someone to have an engineering
vertical with for example, a strong business/operations/etc. horizontal.
It&amp;rsquo;s definitely a thing, tons of successful founders of companies do
exactly that. So why are the developers in the front end community
isolating themselves into their own little specializations and modules
that they spend lots of time learning and configuring?&lt;/p&gt;

&lt;h2&gt;The Full Stack Framework&lt;/h2&gt;

&lt;p&gt;This is why I still love &lt;a href="http://rubyonrails.org"&gt;Ruby on Rails&lt;/a&gt;, which turned 10 this year.&lt;/p&gt;

&lt;p&gt;Rails created a layer of abstraction that eliminated much of
the monotony, repetition, and difficult integrations that web development
requires. Building, integrating, and distributing packages of
functionality (gems) became a breeze. It made developing rich applications
on the web much more accessible to people with or without programming
skills, and drastically increased the speed of doing so.&lt;/p&gt;

&lt;p&gt;I hear a lot of people that don&amp;rsquo;t like Rails give their primary reason for disliking it as &amp;ldquo;It&amp;rsquo;s just too much magic.&amp;rdquo; What the hell is that supposed to mean!? Who doesn&amp;rsquo;t love magic? Why would you want to waste time configuring things and wiring up stuff under the hood when you can scaffold and ship a product much sooner? Rails was built to remove the repetition of common architecture patterns, and did it very well. It baffles me that people want to redo this because they&amp;rsquo;re afraid of &amp;ldquo;magic.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;You still have to know a bit of HTML, CSS, and JavaScript to get your way
around Rails, but you can take shortcuts with those too, like templating
with ERB, using CSS frameworks like Bootstrap or &lt;a href="http://refills.bourbon.io"&gt;Thoughtbot&amp;rsquo;s Refills&lt;/a&gt;, and
of course jQuery, which has become startlingly rejected recently by a lot
of the JavaScript community.&lt;/p&gt;

&lt;p&gt;Some proponents of the full stack JavaScript world are attracted to the
&amp;ldquo;one language to rule them all&amp;rdquo; idea, but most implementations of JS
frameworks lack any structure or standardization or convention and take so
much time to configure that shipping a product is arduous. (If you like
the idea of developing entirely in one language, I recommend looking into
Clojure and Luminus which is fast and expressive and uses some
awesome truly full-stack patterns).&lt;/p&gt;

&lt;p&gt;&lt;a href="http://emberjs.com/"&gt;Ember&lt;/a&gt; is an outlier here, and deserves credit for taking a lot of the good ideas Rails popularized and put it in a JS framework with an amazing CLI tool. But unfortunately they don&amp;rsquo;t have marketing expert giants like Facebook (for React) or Google (for Angular) pushing the Ember framework, so naturally it gets pushed aside.&lt;/p&gt;

&lt;p&gt;Stuff like Ember and &lt;a href="http://yeoman.io"&gt;Yeoman&lt;/a&gt; ease the pain a little bit sometimes, but the
fragmentation and the dramatic fiasco that has become of the
JavaScript framework/library/etc world is becoming a defining characteristic of the community. These frameworks inaccessibility often require
that one be an expert just in JavaScript in order to properly implement. Why?&lt;/p&gt;

&lt;p&gt;Full stack development is really just combining the concepts of
&amp;ldquo;standing on the shoulders of giants&amp;rdquo; and &lt;a href="http://fourhourworkweek.com/2014/08/25/the-art-of-strategic-laziness/"&gt;&amp;ldquo;strategic laziness.&amp;rdquo;&lt;/a&gt; We take what we&amp;rsquo;ve learned from the past, and use it to strategically avoid decisions that have already been made and proven by people smarter than us.&lt;/p&gt;

&lt;h2&gt;Effort For its Own Sake&lt;/h2&gt;

&lt;p&gt;Many JavaScript frameworks are implementing patterns like MV-star or MVVM
. They take the solid tried and true MVC pattern that most developers are
familiar with and start scrambling up the acronyms and implementing them
poorly and without conventions (I know MVVM was created before the JS
frameworks, but the creator of the pattern has himself criticized it as
a bad idea for these UI implementations).&lt;/p&gt;

&lt;p&gt;Why are we spending time re-inventing the wheel under the guise of
innovation and re-solving solved problems for its own sake?&lt;/p&gt;

&lt;p&gt;SQL is another example. The problem of organizing data rationally and querying it
was solved decades ago, and any worthy modern framework can interact with
this data and create rich APIs if need be.&lt;/p&gt;

&lt;p&gt;Yet the hot shit these days is NoSQL, which shuns decades of work for &lt;a href="http://www.sarahmei.com/blog/2013/11/11/why-you-should-never-use-mongodb/"&gt;a
markedly worse solution&lt;/a&gt;. This trend is very limiting, and any SQL DB can produce JSON anyway, so what is the point?&lt;/p&gt;

&lt;h2&gt;Servers are our friends&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://ponyfoo.com/articles/stop-breaking-the-web"&gt;Single Page Apps are almost never necessary.&lt;/a&gt;
 Your users don&amp;rsquo;t care about two-way data
binding or one-way data flow. I promise. Neither does your pointy-haired boss.
They care that the data they are getting or posting is getting got or posted.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Isomorphic&amp;rdquo; (which is quite a pretentious word for running on the client and server) JavaScript is an idea that removes the logical separation of client and server so that all the code is tightly coupled and stored together in a repo. This is an interesting solution to the problem that we are now having with SPAs bloating up and slowing down the browser by running the code through the server first and templating. This is, on the surface, a trend toward the monolithic architecture I&amp;rsquo;m touting in this article.&lt;/p&gt;

&lt;p&gt;But, really it&amp;rsquo;s roundabout, difficult to implement, and adding complexity when we should be removing it. Like, how about just not using too much JS on the client and minimizing requests? People say it helps with SEO, but Google now crawls pages that are generated with JS, at least supposedly. If you want better SEO, don&amp;rsquo;t render all your content with JavaScript.&lt;/p&gt;

&lt;p&gt;Data and content should be submitted and displayed by the client, and manipulated and stored on the server. This has worked well, and will continue to work well for the foreseeable future. Just sprinkle in the JS that is needed to make you&amp;rsquo;re app interactive and pretty and things will move along nicely.&lt;/p&gt;

&lt;h2&gt;Over-modularization&lt;/h2&gt;

&lt;p&gt;The Unix philosophy of &amp;ldquo;Do one thing and do it well&amp;rdquo; has been repeated to the point of overuse in the community, especially surrounding the React ecosystem. So React does the view layer well. Redux does the data flow well. Webpack does package management well, and Gulp or NPM scripts do build process well. And so on and so forth.&lt;/p&gt;

&lt;p&gt;Well, Rails has many components that do their respective pieces well. Active Record does ORM and data handling &lt;em&gt;very&lt;/em&gt; well. ActionMailer does email well. The asset pipeline does asset management well. And so on and so forth.&lt;/p&gt;

&lt;p&gt;But guess what? Ruby on Rails does one thing, and one thing well, and that&amp;rsquo;s &lt;em&gt;full-stack web development&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s also important to remember that Unix is a family of operating systems. Operating systems do many things, and do them well. One off the top of my head might be system operation. But each of the components do their own thing well to make the monolith of Unix the magical beast that it is.&lt;/p&gt;

&lt;p&gt;Microservices, containers, and &amp;ldquo;anti-monolithic&amp;rdquo; approaches to
architecture make sense occasionally, like when you work for Netflix or
Spotify and have teams churning out features at enormous scale that needs
multi-threaded asynchronous load balancing and all the jazz.&lt;/p&gt;

&lt;p&gt;But unless you&amp;rsquo;re a specialist in whichever micro piece of the stack and
are sticking to it(or if you&amp;rsquo;re an architect and setting this stuff up is
your specialty), this type of architecture is daunting and will
unquestionably turn into an unmaintainable spaghetti mess.&lt;/p&gt;

&lt;p&gt;The fact is we are over-modularizing things. Every time I start a new JS
project, I feel like I just moved into a new house with nothing but
a screwdriver and a few thousand dollars worth of Ikea furniture -I&amp;rsquo;m
excited so I tear open the boxes and get started but building the couch
seems more fun than the bookcase and I just stripped all the screws of the
wardrobe which was too heavy to lift by myself anyway and I really should
start on my desk so I can build a computer to put on it and now I lost
that screwdriver. Before I know it, I have a room full of shredded
cardboard under a pile of partly-assembled furniture and the rest of the
house is still empty.&lt;/p&gt;

&lt;p&gt;What if I had the option of walking into my house totally furnished to my
exact specifications and expectations at no extra cost?&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s what I think of as what some folks like to call &amp;ldquo;monoliths.&amp;rdquo; I&amp;rsquo;m
fine with that word. If convention means monolith than I prefer monoliths
over modules, and I think it&amp;rsquo;s odd that so many developers want to be so
contrarian about it. I get the whole rebel spirit of the industry and
engineering culture, but historically it hasn&amp;rsquo;t been such a hodgepodge - it has continually moved towards conventions and layers of abstraction, so
we can be more effective and efficient and get on with innovating (or in
most of our cases, selling something).&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t want to have containers containing NoSQL interacting with
modularized libraries inside their own containers. It&amp;rsquo;s gonna be slow to
develop, and slow to load. I want a monolith that I can spend more time on
making it do a better job at what it is and ship the damn thing.&lt;/p&gt;

&lt;p&gt;Doing a project in React has such a huge learning curve and the sheer
amount of modules and libraries one must connect and configure makes my
head spin. There are seemingly infinite combinations of libraries and
newest things you must know to &lt;a href="http://mir.aculo.us/2015/08/25/how-to-actually-ship-software-that-actually-works/"&gt;actually ship something.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/@ericclemmons/javascript-fatigue-48d4011b6fc4#.s12704ins"&gt;Some people love this constant stream of new stuff and learning, but even
they are feeling the exhaustion.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My buddy shaine put it well -&lt;/p&gt;

&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;Is there a way to just skip over react/webpack/es6 to the next big thing? I love those things, but theoretically I love the next thing more.&lt;/p&gt;&amp;mdash; Shaine Hatch (@ShaineHatch) &lt;a href="https://twitter.com/ShaineHatch/status/643468259375714304"&gt;September 14, 2015&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;It&amp;rsquo;s okay to love new things and be hungry for more learning, but I do
believe that the lack of structure, conventions, and opinionated-ness is crippling
the potential of what we can do, especially in the JS community. Not to mention
the insane additions of features in
ES6/ES2018/ES-whatever-we&amp;rsquo;re-calling-it-now.&lt;/p&gt;

&lt;h2&gt;Lets go back to convention over configuration.&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://medium.com/@wob/the-sad-state-of-web-development-1603a861d29f#.65e9l1sie"&gt;The chaos of the ultra-modularized JavaScript (and relatives) community&lt;/a&gt; can be solved by
coming together to develop some order and re-use, so we can use
conventions that are shared by most instead of connecting and configuring
one library after another to re-solve solved problems. Developers are not
happy with this churn fatigue, and users are getting shittier experiences
from it.&lt;/p&gt;

&lt;p&gt;Maybe the full-stack naysayers are saying nay because they have spent so
much time specializing on their thing that they find it impossible to be
as good at doing all the things. If we standardized some conventions, more
of us would be able to specialize on the entire stack, but only because we
are really specializing on the layer of abstraction that does all the
full-stack stuff.&lt;/p&gt;

&lt;p&gt;We in the &lt;a href="http://www.breck-mckye.com/blog/2014/12/the-state-of-javascript-in-2015/"&gt;current state of the JS world&lt;/a&gt; are lacking the glue that holds the modules that make a magnificent, magical monolith. I&amp;rsquo;m talking about the ridiculous steps of getting all the moving pieces to work together. Let&amp;rsquo;s come up with ways to fix it.&lt;/p&gt;

&lt;p&gt;Undoubtedly a large percentage of you reading this will say, &amp;ldquo;If you don&amp;rsquo;t like
it fork it, fix it, or make a better one.&amp;rdquo; But not only do I have no desire
whatsoever to do that, I also believe this mentality is possibly the biggest
contributor to the &lt;a href="https://xkcd.com/927/"&gt;clusterfuckification of the community&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m ranting, but I&amp;rsquo;m also here to offer solutions. People need to stop making
JS frameworks, and people also need to stop writing self contained libraries
that don&amp;rsquo;t conform to any standard but their own. Follow the examples of Rails
and Django, and SpringMVC and even jQuery. Let&amp;rsquo;s just come together to pick a framework with a high level of abstraction, so we can make the magic happen by piggybacking on the magic the frameworks provide. &lt;a href="http://blog.circleci.com/its-the-future/"&gt;It&amp;rsquo;s the future.&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Teach Your Skills for Fun and Profit</title>
    <link rel="alternate" href="http://elliotec.com/teach-your-skills-for-fun-and-profit/"/>
    <id>http://elliotec.com/teach-your-skills-for-fun-and-profit/</id>
    <published>2015-11-10T13:49:00-07:00</published>
    <updated>2017-02-26T23:40:25-07:00</updated>
    <author>
      <name>Michael Elliott</name>
    </author>
    <content type="html">&lt;h2&gt;An age old concept&lt;/h2&gt;

&lt;p&gt;What do Alton Brown, Tim Ferris, Bob Vila, and Ryan Bates all have in common? You guessed it, they all made a small (or large) fortune off teaching the skills of their trade. They weren&amp;rsquo;t teachers initially, they were just pretty good at what they did, and thought teaching others what they knew could be beneficial to all parties. And it was.&lt;/p&gt;

&lt;p&gt;Teaching your skills at any level can sharpen them dramatically and make you a decent side income. Longer term you may find it makes you more than a decent side income, and teaching becomes a skill in itself.&lt;/p&gt;

&lt;p&gt;It has never been a secret that teaching is a great way to learn. The ancient Roman philosopher Seneca stated that, &amp;ldquo;While we teach, we learn&amp;rdquo;, two millennia ago. European schools started to have some version of teaching assistants or student teachers around the end of the 18th century.&lt;/p&gt;

&lt;p&gt;There have been more &lt;a href="https://en.wikipedia.org/wiki/Learning_by_teaching#The_LdL_approach"&gt;recent pedagogic techniques&lt;/a&gt; focused specifically on having students teach to learn based on research that teaching is, in fact, the &lt;em&gt;best&lt;/em&gt; way to learn.&lt;/p&gt;

&lt;p&gt;&lt;img src="../images/learning_pyramid.png"/&gt;&lt;/p&gt;

&lt;h2&gt;Gaining expertise&lt;/h2&gt;

&lt;p&gt;In his book &lt;a href="http://fourhourworkweek.com"&gt;&amp;ldquo;The 4-Hour Workweek,&amp;rdquo;&lt;/a&gt; Tim Ferris famously (and controversially) outlines how to be come an expert in anything in four weeks and six steps. Read the book if you want to know each step, but let me give you a hint: at least half of them involve teaching.&lt;/p&gt;

&lt;p&gt;Think about the times you&amp;rsquo;ve had to give presentations. It&amp;rsquo;s likely that you started out methodically when you found out you were going to do it, only to find yourself scrambling the night before and doing it in a few hours college-thesis-style. But you still learned a ton! Certainly more than the people that you were presenting for.&lt;/p&gt;

&lt;p&gt;Turns out, &lt;a href="http://link.springer.com/article/10.3758%2Fs13421-014-0416-z"&gt;studies show&lt;/a&gt; that even &lt;em&gt;being told&lt;/em&gt; you will have to teach a concept later improves learning and recall significantly. Maybe those of us with high willpower can trick ourselves into this, but I recommend actually putting yourself in a teaching situation to get the full effect.&lt;/p&gt;

&lt;h2&gt;Tricking ourselves&lt;/h2&gt;

&lt;p&gt;We trick ourselves all the time into thinking we are learning. It&amp;rsquo;s quite a conundrum - how can we have a full grasp of an idea when we don&amp;rsquo;t know what we don&amp;rsquo;t know?&lt;/p&gt;

&lt;p&gt;As &lt;a href="http://artofproblemsolving.com/articles/learning-through-teaching"&gt;Richard Rusczyk says&lt;/a&gt;, &amp;ldquo;Teaching removes this possibility of self-deceit.&amp;rdquo; This happens both by us preemptively gathering more information and knowledge in anticipation of our student&amp;rsquo;s lack of understanding or questions, and also by being put on the spot by those which were not anticipated at the time of teaching.&lt;/p&gt;

&lt;p&gt;Teaching also happens to be an excellent cure for an endemic of the tech world: &lt;a href="https://en.wikipedia.org/wiki/Impostor_syndrome"&gt;Impostor Syndrome&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Start teaching when you start learning&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://elliotec.com/how-i-got-a-job-in-web-development"&gt;In an earlier post&lt;/a&gt;, I laid out the steps I took in getting a job in my current field of web/software development. It is notable that quite early in the process, I was getting paid to teach people what I had been learning, almost in tandem. I recall my instructor at the bootcamp I was enrolled in mention something in passing about learning by teaching and I really took it to heart.&lt;/p&gt;

&lt;p&gt;I started a gig as a personal tutor for a Computer Science grad student at UW in Ruby on Rails before finishing the course, and then was an assistant instructor for the following bootcamp after mine. I believe these two jobs were an early immunization for the impostor syndrome I may have had if I didn&amp;rsquo;t do them. It might have been a little too far on the ego boost, but thats another problem.&lt;/p&gt;

&lt;p&gt;Point is, I started teaching for purely selfish reasons - &lt;a href="https://www.youtube.com/watch?v=2Nx-sH0kn6E"&gt;make money, and get learnt&lt;/a&gt;. (sorry)&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s not to say I haven&amp;rsquo;t had lots of rewarding experiences teaching what I do. I was surprised at the amount of attention my post on how I got my job was getting, and how many folks emailed me that it was an inspiration boost, or they got into a course they&amp;rsquo;ve been excited about, or they got their dream job, etc. Knowing you&amp;rsquo;ve helped someone achieve something is a sweet feeling.&lt;/p&gt;

&lt;p&gt;And I guarantee I learned more than my audience just by writing that.&lt;/p&gt;

&lt;h2&gt;&amp;ldquo;I know that I know nothing&amp;rdquo;&lt;/h2&gt;

&lt;p&gt;Since then, I&amp;rsquo;ve started working as a mentor for &lt;a href="http://thinkful.com"&gt;Thinkful&lt;/a&gt; on the weekends. This, plus being the development lead of a team at my full time spot gives me plentiful teaching, and therefore learning, opportunities.&lt;/p&gt;

&lt;p&gt;I am consistently stumped by questions my students and teammates ask me. Sometimes it feels good when they have an easy question that I&amp;rsquo;m well prepared for, but that is rarely the case. More often, I&amp;rsquo;ll have to look up pieces of answers and help them and myself connect the dots.&lt;/p&gt;

&lt;p&gt;Surprise! Thats what I do in my real life job anyway!&lt;/p&gt;

&lt;p&gt;So, if you&amp;rsquo;re a blossoming developer or recent grad that is stuck in the awful, seemingly infinite loop of, &amp;ldquo;I need experience to get a job to get experience so I can get a job,&amp;rdquo; like me and so many have been in the past, try your hand at teaching. Some good places to start would be TA-ing for some classes, private tutoring, or even just blogging.&lt;/p&gt;

&lt;p&gt;Or, if you&amp;rsquo;ve got tons of experience and are feeling a bit stale on your skills or just plain bored, try teaching! Some good places to start could be assisting at a university, private teaching facility like bootcamps, blogging, or best of all, be a true mentor for someone.&lt;/p&gt;

&lt;p&gt;A true mentorship experience is hard to find without contriving it, but I have had some unbelievable mentors in my life that have been far more influential than they know, and have shaped me and my character immensely. I strive to be that person for someone else someday, but I may not even know it if it happens.&lt;/p&gt;

&lt;p&gt;Being a teacher implies mastery of the subject even though to be a decent teacher you must acknowledge that the more you know, the more you realize you know very little.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s usually humbling. It&amp;rsquo;s often lucrative. And it&amp;rsquo;s always going to be a better learning experience for you than your student.&lt;/p&gt;

&lt;h3&gt;Other references and sources&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Learning_by_teaching#The_LdL_approach"&gt;The LdL Approach&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.nde-ed.org/TeachingResources/ClassroomTips/Constructivist%20_Learning.htm"&gt;Constructivist Learning&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://lifehacker.com/teach-others-what-you-know-to-make-connections-and-lear-1639560273"&gt;Teach what you know&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://ideas.time.com/2011/11/30/the-protege-effect/"&gt;The Protoge Effect&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.sciencedirect.com/science/article/pii/S0160289607000062"&gt;Birth Order and Intelligence&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.agent4change.net/grapevine/platform/1646-i-learn-more-by-teaching-than-learning-gavin-dykes.html"&gt;I learn more by teaching than learning&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://ww2.kqed.org/mindshift/2015/09/14/lesson-study-technique-what-teachers-can-learn-from-one-another/"&gt;Lesson Study Technique&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Music, Art, &amp; Web Apps in Clojure</title>
    <link rel="alternate" href="http://elliotec.com/art-music-web-clojure/"/>
    <id>http://elliotec.com/art-music-web-clojure/</id>
    <published>2015-05-27T00:17:00-06:00</published>
    <updated>2017-02-26T23:40:25-07:00</updated>
    <author>
      <name>Michael Elliott</name>
    </author>
    <content type="html">&lt;iframe src="//slides.com/michaelelliott/art-music-webapps-clojure/embed" scrolling="no" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;
</content>
  </entry>
  <entry>
    <title>How I Got a Job in Web Development</title>
    <link rel="alternate" href="http://elliotec.com/how-i-got-a-job-in-web-development/"/>
    <id>http://elliotec.com/how-i-got-a-job-in-web-development/</id>
    <published>2015-01-27T06:12:00-07:00</published>
    <updated>2017-02-26T23:40:25-07:00</updated>
    <author>
      <name>Michael Elliott</name>
    </author>
    <content type="html">&lt;h2&gt;Why I&amp;rsquo;m writing this&lt;/h2&gt;

&lt;p&gt;This post is an attempt to explain how I got a position as a professional web developer with just over a year of experience programming and a degree in psychology. I&amp;rsquo;m writing in hopes that it will help anyone else along a similar path, or those who don&amp;rsquo;t know where to start. This is by no means a surefire plan to get anyone a job in a year or ever. But maybe someone aspiring to become a web developer can take a few resources or find something useful here.&lt;/p&gt;

&lt;p&gt;If you want to skip to a summarized list of things I did, &lt;a href="#thechase"&gt;click here to cut to the chase&lt;/a&gt;. But you might want to come back and see the rest of the story to fill in the details.&lt;/p&gt;

&lt;h2&gt;My first exposure&lt;/h2&gt;

&lt;p&gt;As far as I knew growing up, the Internet was made out of magic. I had taken apart my family computers out of curiosity a few times but had never heard of HTML, or pondered the concept of what software development really was. Most of the technical experience in my life was my enjoyment of building and breaking things, playing with Knex and Erector sets, and growing up with the Internet. Just after high school I was lucky enough to land a job as a contractor for my neighbor soldering circuit boards and electronics for various products he made.&lt;/p&gt;

&lt;p&gt;That was a pretty cool job, but it certainly didn&amp;rsquo;t make me want to study electrical engineering. I went into psychology thinking it would supplement my intent of going to medical school and becoming a psychiatrist. That dream died fast for numerous reasons, and I ended up rushing to finish my degree ASAP. I then started work at Starbucks after leaving my student job upon graduation.&lt;/p&gt;

&lt;p&gt;There are pros and cons to working at Starbucks, and I wasn&amp;rsquo;t sure if I wanted to stick around forever. Career-wise I was open to whatever at the time and didn&amp;rsquo;t have much direction. While poking around on Reddit in January of 2013, I had vaguely been introduced to the idea of web development and coding by a particular post (which I have tragically not since been able to find), and it piqued my interest to research it further. Thats when I realized that I was basically &amp;ldquo;coding&amp;rdquo; when I followed an extensive process (&lt;a href="http://lifehacker.com/5830367/how-to-hack-your-wii-for-homebrew-in-five-minutes"&gt;soon thereafter replaced by this&lt;/a&gt;) haphazardly copypasting weird long strings of symbols in college to mod my Wii so I could play all the games.&lt;/p&gt;

&lt;p&gt;That same month I learned about &lt;a href="http://www.linuxfoundation.org/"&gt;Linux&lt;/a&gt; and decided to install &lt;a href="http://www.ubuntu.com/desktop"&gt;Ubuntu&lt;/a&gt; on an old Dell I inherited from my parents. In order to get things installed and working properly I had to open the command line and actually use Unix commands, some of them often enough to start understanding what they did and remembering them. I was just getting into Minecraft at the time and wanted my girlfriend to play with me, and I figured with a little googling it would be easy enough to setup a local server on that Ubuntu machine. It was, and I consider that my first real and aware exposure to programming.&lt;/p&gt;

&lt;h2&gt;Finding the time&lt;/h2&gt;

&lt;p&gt;Over the next few months I dabbled in various tutorials on HTML and CSS recommended by Reddit but struggled finding time and motivation to just sit down and get through them. I attempted to complete the &lt;a href="http://www.codecademy.com"&gt;Codecademy&lt;/a&gt; courses multiple times but found them boring and purposeless. The idea sort of went to the back burner as I worked full-time, moved into a new place, and wanted to relax and enjoy my time off. I was doing just that at the climbing gym on June 1st when I clumsily stumbled off the mat at the base of the wall and dramatically broke the cartilage in my ankle. Somehow I didn&amp;rsquo;t need surgery but the doctor said it had to be non-weight bearing for 12 weeks.&lt;/p&gt;

&lt;p&gt;So I called my boss and broke the news, she reminded me of one of the aforementioned &amp;ldquo;pros&amp;rdquo; of working at Starbucks: Short-term disability insurance. It got signed off no problem. The first couple weeks were mostly spent sleeping away the pain and playing through various video games, pretty much just lazing around. But one day when the Lortab wore off I was feeling very unproductive and lazy, so I decided to set a goal of getting through those HTML and CSS Codecademy courses the next week. At the same time we moved into my girlfriend&amp;rsquo;s parents&amp;rsquo; house while they were abroad so that eliminated rent and some other expenses for the few months I was out. My girlfriend also deserves a lot of credit for working and helping me out during this time. I became acutely aware of how fortunate I was to be in a position where I was essentially getting paid to chill at home and have 3 months of free time to spend however I wanted.&lt;/p&gt;

&lt;p&gt;This awareness led me to feel like I owed it to karma or whatever powers that were to spend a good chunk of my time out on productive endeavors and keep setting goals like the Codecademy one. I blew through those courses, still feeling annoyed with their seeming lack of purpose and context, but appreciated the introduction to something I knew I wanted to spend more time on.&lt;/p&gt;

&lt;h2&gt;Learning front end fundamentals&lt;/h2&gt;

&lt;p&gt;I soon asked the almighty Google for some more of the top HTML &amp;amp; CSS resources. It wasn&amp;rsquo;t long before I saw the book, aptly titled &lt;a href="http://www.htmlandcssbook.com/"&gt;HTML &amp;amp; CSS&lt;/a&gt;, by Jon Duckett. I chose this book almost exclusively based on the way it looks. The design wowed me, and the content was just what I was looking for. Rather than the piecemeal abstractions and micro lessons on Codecademy, I found Duckett&amp;rsquo;s book to be a refreshing whole-picture approach with real world examples. I went through it in a week and built a custom, useful website from scratch for the first time the following week. I credit this book with teaching me a lot of the foundational knowledge I needed to learn further concepts and build upon. (Duckett has since published another book that I highly recommend, and wish I had at this time: &lt;a href="http://www.javascriptbook.com/"&gt;JavaScript &amp;amp; jQuery&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;My next step was to search through my network for advice. I thought of everyone I knew, went through my Facebook friends, and found someone I could contact that was involved in the industry. So I messaged him and told him about my interest and quickly got a response. He happened to be in a senior position at a very well known company but took the time to give me a little project to work on with a loose deadline. Still being in the first third of my confinement to the couch, I was able to spend two weeks working exclusively on this. I learned a lot about modern best practices and got some great career advice.&lt;/p&gt;

&lt;h2&gt;&lt;a href="http://rubyonrails.org"&gt;Rails&lt;/a&gt; and a development environment&lt;/h2&gt;

&lt;p&gt;At this point I felt comfortable enough to tell my friends and family about my pursuit, and let them know that I was looking for work and projects. A good friend gave me the login to a tutorial series called &lt;a href="http://onemonth.com"&gt;One Month Rails&lt;/a&gt; he bought but never found time for. I certainly had time for it, so I did it.&lt;/p&gt;

&lt;p&gt;This tutorial introduced me to a vast world that I&amp;rsquo;d never seen before. It guided me through setting up a development environment that consisted primarily of &lt;a href="http://www.sublimetext.com"&gt;Sublime Text&lt;/a&gt; and the command line, and helped me get a bunch of other tools set up. I learned about version control and &lt;a href="http://git-scm.com"&gt;git&lt;/a&gt; (and by extension, &lt;a href="http://github.com"&gt;Github&lt;/a&gt;) through repetition in the course, and got a grasp on most aspects of the tech stack in Rails. I finished it in about 2 weeks and had a fully functioning app replicating Pintrest, hosted on &lt;a href="http://heroku.com"&gt;Heroku&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I used jQuery a little bit during the tutorial, which was a nice intro to JavaScript. I realized how useful and necessary it is and wanted to use some other plugins in my future projects.&lt;/p&gt;

&lt;h2&gt;Starting a freelancing business&lt;/h2&gt;

&lt;p&gt;I was super excited about programming and my new prospects for income. I decided I wanted to start a freelance business doing this, and my first step was getting some more projects and clients. The first few were not as hard to get as I had been led to believe. My family and friends already knew I was doing this, so I asked some of them if they needed a website.&lt;/p&gt;

&lt;p&gt;I did one for free, one as a trade, and then started charging (not very much). My first three clients were close friends or family, and after that I indiscriminately offered my services to anyone and everyone. One of my first non-family/friend clients was an HVAC contractor that was fixing the furnace in the house I was renting at the time. He saw me working on a different project, asked what I was doing, and told me he needed a website. I gave him a cheap quote, and promptly had another check in my pocket.&lt;/p&gt;

&lt;p&gt;It was time to legitimize my business; I had started making enough money to open up a bank account and register a sole proprietorship. I finally got around to making myself a (pretty rudimentary) personal website and got my girlfriend&amp;rsquo;s help in designing a logo in Illustrator. We designed business cards at the same time and got a cheap bulk order from FedEx. I still use them and they look like this:&lt;/p&gt;

&lt;p&gt;&lt;img class="cards" src="../images/cardfront.png"&gt;&lt;/p&gt;

&lt;p&gt;Little did I know that these cards would be instrumental in getting me my current job.&lt;/p&gt;

&lt;h2&gt;Expediting my learning&lt;/h2&gt;

&lt;p&gt;I continued to get a client here and there after my ankle had fully healed and I started work again full time at Starbucks. It wasn&amp;rsquo;t enough to pay the bills though, and at this point I was dedicated to becoming a professional web developer. I looked around for some dev roles in my area and came up short. Most required a level of proficiency that I wasn&amp;rsquo;t totally confident I had.&lt;/p&gt;

&lt;p&gt;I mentioned to the same friend who introduced me to the Rails tutorial that I wanted to somehow expedite my learning to get to a professional skill level. He told me about these &amp;ldquo;code bootcamps&amp;rdquo; that had been popping up around the country taking after the tech company incubator model and their apparent success. He had been working at a venture impact fund, and was tasked to get information about these schools for possible investments. He emailed me a spreadsheet with some basic info about each bootcamp he looked into (which was immensely helpful - something similar with can now be found &lt;a href="http://www.skilledup.com/learn/programming/the-ultimate-guide-to-coding-bootcamps-the-exhaustive-list/"&gt;here&lt;/a&gt;) and I did my own research on which would be the best for me.&lt;/p&gt;

&lt;p&gt;That October, after much deliberation I decided to apply to &lt;a href="http://www.codefellows.org"&gt;Code Fellows&lt;/a&gt; in Seattle. I chose this particular code school mainly because they guaranteed a job in software development within 9 months or I paid nothing. Another reason was its relatively low price compared to some of the others like Hack Reactor, which at the time I was applying was more expensive than grad school plus the cost and hassle of moving to San Fransisco. Also, I had never been to Seattle and was in great need of an adventure to a place I had heard only good things about.&lt;/p&gt;

&lt;p&gt;The application and interview process was pretty intense. After an initial application assessing my skills and aptitude I was moved on to another stage that required a submission of a one-minute video of me explaining &amp;ldquo;something technical.&amp;rdquo; I chose jQuery and probably did it 50 times before feeling I had done an adequate job. I soon got another email requesting a time for an interview, and I got on Skype with the CEO at the alloted time.&lt;/p&gt;

&lt;p&gt;The interview was absolutely terrible. There were connectivity issues which amplified the fact that I had absolutely no clue what I was talking about. He was asking me questions about data structures and algorithms and how I&amp;rsquo;d model real life objects and items in code. I found myself literally speechless multiple times during the call. I had a few acceptable answers but mostly it was pretty embarrassing and I was sure I wouldn&amp;rsquo;t move further. But he must&amp;rsquo;ve had some faith in me, and said he&amp;rsquo;d send me a code challenge to complete as soon as possible.&lt;/p&gt;

&lt;p&gt;It was a Friday, and I started working on it immediately and through the weekend. It was very challenging. There were three individual challenges - they went something like this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Make a simple page to manage a todo list where users can input todos and check them off upon completion.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Model a public library with object oriented Ruby including Library, Shelf, and Book objects that has &amp;ldquo;enshelf&amp;rdquo; and &amp;ldquo;unshelf&amp;rdquo; methods and essentially keeps track of inventory.(The actual description was way more technical for this one.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Generate and deploy a publicly available Rails app on Heroku that can create, edit, update, and destroy users. First name is required, and email must be valid. Add more features if it was easy.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The first challenge was not too difficult for me, because I&amp;rsquo;d been doing front end the most up to that point. I recall getting slightly hung up on a piece of the problem, but I think I solved it in the first night after the interview.&lt;/p&gt;

&lt;p&gt;I then skipped to the third challenge knowing number 2 would take me much longer. There were a few tricky parts, but I made it work with time to spare for a quick Bootstrap UI and some funny pictures. You can find the code for that app &lt;a href="https://github.com/elliotec/codefellows_crud"&gt;here on my Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And finally, the public library. This was by far the most difficult part of the challenge and up to that point the most complicated programming I&amp;rsquo;d been tasked to do, and it&amp;rsquo;d be a long time before I did anything that difficult again. This is the point where I realized that I&amp;rsquo;d been learning Rails without hardly learning any Ruby at all - hence the namesake &amp;ldquo;on Rails.&amp;rdquo; I was determined to submit the challenges by Monday, and was sincerely worried that wasn&amp;rsquo;t going to happen when I read the description of the challenge. So I immediately started looking around for tutorials that would help me with plain Ruby. I did &lt;a href="http://tryruby.org"&gt;CodeSchool&amp;rsquo;s Try Ruby&lt;/a&gt; which was introductory and ultimately not very helpful when it came to what I was trying to accomplish.&lt;/p&gt;

&lt;p&gt;I came across &lt;a href="http://tutorials.jumpstartlab.com/projects/ruby_in_100_minutes.html"&gt;Ruby in 100 Minutes&lt;/a&gt; which is quite different now than when I used it as a resource. At the time, it modeled a personal chef that made things for you, and the resulting program &lt;a href="https://github.com/elliotec/100_min_ruby/blob/master/personal_chef.rb"&gt;looked like this&lt;/a&gt;. It still is probably worth reading through, but it doesn&amp;rsquo;t seem quite as helpful for writing a real Ruby program as it used to be.&lt;/p&gt;

&lt;p&gt;After going through that tutorial, I perused Github looking for real world examples I could use to model my program after. I found about 5 or 6 that I looked at several times and sort of made the brain connections I needed to translate into the public library. It took me from Saturday night until Sunday night to do this whole thing, and with minimal to zero sleep (I don&amp;rsquo;t think this was necessary, I probably would have been fine if I took another day, but I was determined). &lt;a href="https://github.com/elliotec/cfruby_public_library/blob/master/cfruby_public_library.rb"&gt;This is how it turned out&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Code Fellows&lt;/h2&gt;

&lt;p&gt;A bit to my surprise, I got in, and bought a one way ticket to Seattle arriving the day before the start of my cohort on January 6th. Finding a place to stay wasn&amp;rsquo;t terribly difficult (but it was pretty expensive compared to what I was used to in Utah) and I signed a 3 month lease in a tiny 10 x 10 apartment about a 20 minute walk from their facility.&lt;/p&gt;

&lt;p&gt;The first day started out with a little bit of housekeeping/logistics, but then we were immediately thrown into the fire. So many things to configure and download, all in a whirlwind couple hours. Before the end of the day, we started our first assignment on behavior driven development in Rails. It was immediately and continuously super intense.&lt;/p&gt;

&lt;p&gt;I learned &lt;em&gt;a lot&lt;/em&gt; during my time at Code Fellows. I was spending no less than 100 hours a week totally immersed in code and the community. I would barely have enough time to take off my shoes at the end of each day before immediately passing out from expending all the energy I had.&lt;/p&gt;

&lt;p&gt;The curriculum itself was very rigorous (most of my projects and assignments can be found on my Github if you&amp;rsquo;re interested), but I feel some of the material we were taught was not as impactful to me as what I learned from interacting with my peers and instructors and going to meetups almost every night, brushing elbows with some of the biggest names in the tech community and absorbing everything I could from everyone I could. I also had a great mentor from a local startup that really helped me tie a few loose ends in the directions I was heading.&lt;/p&gt;

&lt;p&gt;Another really useful aspect of the bootcamp was the increasing of our web presence. I never had a &lt;a href="http://linkedin.com/in/elliotec"&gt;Linkedin&lt;/a&gt; account up until then, which I had come to find out is an absolutely essential tool in job searching. There was staff there tasked with helping us maximize the efficacy of our web presence and resumes, and doing mock interviews both technical and general.&lt;/p&gt;

&lt;p&gt;During the course I was contacted with a few contract opportunities that I took, even though I really didn&amp;rsquo;t have the time. One was as a personal tutor for someone with a MS in computer science learning Rails in a certificate program at UW. I had minimal credentials, and I got paid the most money I&amp;rsquo;d ever charged up to that point to help a comp sci grad student. This put things in an interesting perspective - that the practical knowledge I&amp;rsquo;d been working on gaining might just be more useful than the expensive and dense theory taught in academia.&lt;/p&gt;

&lt;p&gt;Toward the end of the bootcamp, I was asked by an instructor if I&amp;rsquo;d be interested in being a teaching assistant for a new month long class they were doing on the fundamentals of computer science and web development. They were going to pay me and I still had a month left on my lease, so I jumped at the opportunity. It was taught in JavaScript. I learned so much by being put in a position where students looked up to me and I was tasked with being their first resource for help and knowledge.&lt;/p&gt;

&lt;p&gt;I had a few interviews in Seattle, but even though I had made tons of friends the transient nature of my situation was a major barrier in landing a spot right away. A few students got jobs almost immediately after graduation, and others slowly trickled along roughly biweekly. We lost 3 classmates half way through the bootcamp, but most of us have jobs now or are making a decent living consulting.&lt;/p&gt;

&lt;h2&gt;Startup Weekend&lt;/h2&gt;

&lt;p&gt;Something I really wanted to do before I left Seattle was participate in a &lt;a href="http://startupweekend.org/"&gt;Startup Weekend&lt;/a&gt; event. There was only one more before my return to Salt Lake in April and it was unfortunately sold out. I got in contact with an instructor at Code Fellows who I knew was partnering with the event and he pulled a couple strings and got me a ticket as a designer. So I went and pitched my first startup idea which I made up on the spot and failed magnificently at.&lt;/p&gt;

&lt;p&gt;I was baffled by how few developers were there when it was time to choose teams. Even though I had a designer ticket, it was clear my coding skills were needed (not to mention my design skills were nowhere near most of the others there). Due to the lack of developers, there were several teams that were asking me to join them, offering one incentive or another, and at least one major altercation between two team leaders over me. It was awkward.&lt;/p&gt;

&lt;p&gt;So I chose a team (who has since gone on to be a &lt;a href="http://getfastbar.com"&gt;real company&lt;/a&gt;), and had an absolutely great time. I met some really smart, interesting people. I wrote the back end of the app in Rails that connected to an iOS app. I learned so much from the team and working closely with the iOS developer. We stay in contact and I credit him with leading me to much of the interest and knowledge I have now.&lt;/p&gt;

&lt;p&gt;Startup Weekend really put my skills to the limit, pushed me in ways I&amp;rsquo;d never been pushed before, and introduced me to lasting relationships that remain beneficial. I also had a really interesting and legitimate project for my portfolio that would attract future employers.&lt;/p&gt;

&lt;h2&gt;Returning home&lt;/h2&gt;

&lt;p&gt;I got back to Salt Lake the first week of April and immediately started sending applications to companies in SLC and Seattle. The first couple weeks were slow with responses, and I was busy updating my own portfolio site anyway. Things went much quicker once my site was ready and some projects were up. Between both cities, I sent out about 100 resumes and applications. The majority of those did not get any response. I had much better luck when I started to beef up my Linkedin again, posted on the job hunting subreddits, and used social media to expose myself and my interest in finding a job.&lt;/p&gt;

&lt;p&gt;I went through roughly 20 phone interviews. The majority of the phone interviews led to the next step, usually either a code challenge of some sort, or an in-person interview.&lt;/p&gt;

&lt;p&gt;At first, the code challeneges were pretty tough for me. Usually the at-home ones had something to do with their company. Literally every single at home challenge for a company required consuming data from an API. I was uncomfortable at first with it. It sounds pretty weird to say now, but I really hadn&amp;rsquo;t been exposed to consuming data from an API until code challenges for jobs. It&amp;rsquo;s strange that I didn&amp;rsquo;t learn it before, since it is such an essential skill.&lt;/p&gt;

&lt;p&gt;Most of the in person interviews had a white board challenge involved, which is honestly in my opinion not a good or accurate measure of a person&amp;rsquo;s coding skill. I actually was prepared for this by Code Fellows, and did quite well on most of them.&lt;/p&gt;

&lt;p&gt;I got a false alarm offer from a local startup I interviewed with for a Rails job in early May. It was a big disappointment when they went dark on me but I recovered and threw myself out there again by putting my site on Reddit job subs and reaching out to people at attractive companies on Linkedin.&lt;/p&gt;

&lt;h2&gt;The first job&lt;/h2&gt;

&lt;p&gt;The first week of June brought me 2 official offers within days of each other. One was for a software development contractor company that contracts people to other companies for long periods of time. I was offered a senior position in ruby, Rails, and front end development. The other offer was for a front end role on a .Net stack. The Rails one was for more money. I chose the other one because I met both teams and liked them more. I don&amp;rsquo;t regret that decision at all, and I&amp;rsquo;ve kept a good relationship with the other company.&lt;/p&gt;

&lt;p&gt;Interestingly, both companies that gave me an offer reached out to me rather than the other way around. One was a recruiter who found me on Linkedin and the other was the dev manager who saw my post on Reddit. Both asked me lots of technical questions, and even code questions, but neither gave me a white board nor take home code challenge.&lt;/p&gt;

&lt;p&gt;I enjoyed my first job as a developer. I was introduced to a lot of technologies I wouldn&amp;rsquo;t have been otherwise. They worked in a Windows environment, so I had to learn Visual Studio, C#, .Net, Razor, etc. and how to plug Coffeescript and Sass into the stack. It was a great learning experience and I made good friends there, but soon I had a lot of recruiters contacting me and I wasn&amp;rsquo;t a huge fan of the industry the company was in. It made me curious about opportunities that might have better suited me. I read &lt;a href="http://www.theatlantic.com/business/archive/2014/11/quit-your-job/382402/"&gt;this article on the benefits of early career job-hopping&lt;/a&gt; which eased the feeling of guilt I had while considering new opportunities.&lt;/p&gt;

&lt;p&gt;So 4 months after my first job in web development, I accepted another offer at a &lt;a href="http://www.overstock.com"&gt;well known company&lt;/a&gt; in the area. Now, 4 months since starting the new job, I am quite content with where I&amp;rsquo;m at.&lt;/p&gt;

&lt;p&gt;&lt;a class="anchor" id="thechase"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Cut to the chase!&lt;/h2&gt;

&lt;p&gt;Okay, maybe that was too long, so here&amp;rsquo;s a summarized tl;dr list of the steps I took to get a job as a web developer a year from deciding to do so.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Exposed myself to seemingly complicated tech tasks for the purpose of exploration. This included hacking my Wii, setting up a Minecraft server, and getting familiar with various flavors of Linux. Generally being curious about technology and the internet and how it all works.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Gained a real interest in the idea of web development and programming in general. Money was of course a motivator, but certainly not enough to create the passion I eventually found in the actual craft.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Got introduced to front end fundamentals by trying things like &lt;a href="http://codecademy.com"&gt;Codecademy&lt;/a&gt;. Personally I didn&amp;rsquo;t like the little teasers and if I could start over would skip straight to reading &lt;a href="http://htmlandcssbook.com"&gt;HTML &amp;amp; CSS&lt;/a&gt; and &lt;a href="http://javascriptbook.com"&gt;JavaScript &amp;amp; jQuery&lt;/a&gt; by John Duckett. These are from what I&amp;rsquo;ve seen the most accessible and practical books written on front end web development.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Made some websites. My first was one for a real company which ended up not needing or using it. I did it for free to learn. This is unquestionably (hopefully obviously) the most important step I took. I then started reaching out to my network for people who needed websites and made some for friends and family.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Learned about server side scripting and full stack frameworks. I went through &lt;a href="http://onemonth.com"&gt;One Month Rails&lt;/a&gt; mostly due to a generous friend giving me his login. It was excellent and totally worth whatever they are charging. I then built another full stack web app.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Started a freelancing business. This really helped me legitimize myself, if only &lt;em&gt;for&lt;/em&gt; myself, and made me feel official and that I was all-in on my decision to make this my career. I made business cards, a portfolio site, a bank account, and registered my business name. Then I actually found clients and got paid to do what I had decided I wanted to get paid to do.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Created a web presence. Made sure I had accounts on Twitter, Linkedin, Github, Hacker News, Designer News, and a portfolio site, and tried to sharpen them all up. This was vastly beneficial, one of the most important things I did next to actually making websites and roughly equal to networking.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Attended a code school. I chose &lt;a href="http://codefellows.org"&gt;Code Fellows&lt;/a&gt; in Seattle because of it&amp;rsquo;s job guarantee and location. Learned a ton, made lots of friends, would do it over again in a heartbeat. Absolutely worth the investment. I took advantage of a lot of great career opportunities offered to me because of this, including assisting in teaching a class and being a personal tutor to a CS grad student.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Networked. I asked everyone I knew what they knew about the industry and craft, and went to every &lt;a href="http://www.meetup.com"&gt;meetup&lt;/a&gt; that I could. The conversations I had (and still have) at these events are invaluable. You learn shockingly more from talking with people in the community than you would sitting in any combination of classes. It also helped me with social skills, which even as a programmer is surprisingly important.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Applied, interviewed, practiced, repeat. I sent out tons of applications and put myself out there in every way I could think of. Ultimately Linkedin, Reddit, and meetups were the channels that actually got me job offers. I practiced whiteboarding algorithms and solving problems, had a lot of interviews (each better than the previous, for the most part) and continuously kept up to date on current trends and technologies.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A year is a relatively short time to have gotten where I did, and I am certain I wouldn&amp;rsquo;t have gotten there without the series of fortunate events (yes, I consider the destruction of my ankle as a fortunate event in hindsight) that allowed me to focus obsessively and full time on this pursuit. But passion is a lot stronger then luck and if one has the drive, they shouldn&amp;rsquo;t need any fortune to make things happen on their own timeline.&lt;/p&gt;

&lt;p&gt;Join the discussion &lt;a href="https://news.ycombinator.com/item?id=8954348"&gt;here on Hacker News&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Using Sass in Visual Studio</title>
    <link rel="alternate" href="http://elliotec.com/using-sass-in-visual-studio/"/>
    <id>http://elliotec.com/using-sass-in-visual-studio/</id>
    <published>2014-11-12T10:10:00-07:00</published>
    <updated>2017-02-26T23:40:25-07:00</updated>
    <author>
      <name>Michael Elliott</name>
    </author>
    <content type="html">&lt;p&gt;Some may find themselves developing the front end of web applications in .NET and Visual Studio. If that&amp;rsquo;s you, I&amp;rsquo;m sorry (at least until the new &lt;a href="http://news.microsoft.com/2014/11/12/microsoft-takes-net-open-source-and-cross-platform-adds-new-development-capabilities-with-visual-studio-2015-net-2015-and-visual-studio-online/"&gt;cross platform open source versions&lt;/a&gt; come out).&lt;/p&gt;

&lt;p&gt;If you use Sass, as hopefully you do if you&amp;rsquo;re reading this, you will find yourself frustrated by the fact that Web Essentials for VS advertised as being capable of Sass compilation, but actually isn&amp;rsquo;t. The following outline is the only way I&amp;rsquo;ve been able to get Sass working in Visual Studio. This has been tested in VS 2012 and 2013.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://visualstudiogallery.msdn.microsoft.com/2b96d16a-c986-4501-8f97-8008f9db141a"&gt;Download Mindscape Web Workbench here&lt;/a&gt; and make sure to enable it in VS at &lt;code&gt;Tools &amp;gt; Extenstions and Updates&lt;/code&gt;. You might have to restart VS.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hopefully you have a &amp;ldquo;main.scss&amp;rdquo; type file in your stylesheets directory that contains all your imports and will eventually compile into a singular minified file called in your markup (this can be added by right-clicking the stylesheets folder, and going to &lt;code&gt;Add &amp;gt; New Item &amp;gt; SCSS Stylesheet (Sass)&lt;/code&gt;, then name appropriately):&lt;/p&gt;

&lt;p&gt;&lt;img src="../images/mainsass.png" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Go to &lt;code&gt;Tools &amp;gt; Options&lt;/code&gt; and select Web Workbench from the list. Adjust the settings so that:&lt;/p&gt;

&lt;p&gt;Compilation &amp;gt; Trigger compile on build = True&lt;/p&gt;

&lt;p&gt;Compilation &amp;gt; Disable Sass compilation = False&lt;/p&gt;

&lt;p&gt;Sass &amp;gt; Produce .css file = True&lt;/p&gt;

&lt;p&gt;&lt;img src="../images/workbench.png"/&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In the toolbar, got to &lt;code&gt;Mindscape &amp;gt; Web Workbench Settings&lt;/code&gt; and make sure the only checkbox selected under Compile is your &amp;ldquo;main.scss&amp;rdquo; file mentioned earlier. Uncheck all the rest unless you want a million extra css files and an hour-long build:&lt;/p&gt;

&lt;p&gt;&lt;img src="../images/settings.png"/&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now your main.scss file will compile on build (and save, depending on your settings) and generate a main.css file in the same directory that is minifiable and browser-readable.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And thats it. Now you can write your Sass and keep your modular style structure nice and happy in Visual Studio and .NET projects. Hopefully this post will be deprecated at the release of the new versions.&lt;/p&gt;
</content>
  </entry>
</feed>
