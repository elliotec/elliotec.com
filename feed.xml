<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>elliotec | Software Development</title>
  <subtitle></subtitle>
  <id>http://elliotec.com/</id>
  <link href="http://elliotec.com/"/>
  <link href="http://elliotec.com/feed.xml" rel="self"/>
  <updated>2016-10-06T00:17:00-06:00</updated>
  <author>
    <name>Michael Elliott</name>
  </author>
  <entry>
    <title>Remodel</title>
    <link rel="alternate" href="http://elliotec.com/remodel/"/>
    <id>http://elliotec.com/remodel/</id>
    <published>2016-10-06T00:17:00-06:00</published>
    <updated>2016-10-06T00:30:29-06:00</updated>
    <author>
      <name>Michael Elliott</name>
    </author>
    <content type="html">&lt;p&gt;In May, my wife Tiffany was looking online browsing through houses on Utah Real Estate randomly on a Saturday night. We had talked about buying a house, but were working on saving up for a down payment that would be a substantial percentage of our $400k maximum budget. We were planning on 2017, because we spent the equivalent of a down payment on our honeymoon to Iceland, Denmark, and Norway the year before and wanted to find the perfect one that would last us for a very long time.&lt;/p&gt;

&lt;p&gt;But that night in May, at 1 o&amp;#39;clock in the morning on a Saturday night, our plans got moved forward quite a bit. She saw this house in the neighborhood in downtown that we&amp;rsquo;ve loved since high school and had since become quite desirable. We almost never looked in the neighborhood because houses around there were going for hundreds of thousands of dollars more than our maximum budget. But here was one, with an asking price of $320k - well below our budget - in the perfect spot of the perfect neighborhood, with a nice yard, shop, and mother-in-law apartment, my only stipulations.&lt;/p&gt;

&lt;p&gt;The one caveat was that it hadn&amp;rsquo;t been updated in almost 30 years, and the previous owners put a lot of wear and tear on it without a lot of care.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>an-ongoing-history-of-myself</title>
    <link rel="alternate" href="http://elliotec.com/an-ongoing-history-of-myself/"/>
    <id>http://elliotec.com/an-ongoing-history-of-myself/</id>
    <published>2016-09-06T15:20:00-06:00</published>
    <updated>2016-12-04T02:25:16-07:00</updated>
    <author>
      <name>Michael Elliott</name>
    </author>
    <content type="html"></content>
  </entry>
  <entry>
    <title>Grass is Always Greener</title>
    <link rel="alternate" href="http://elliotec.com/grass-is-always-greener/"/>
    <id>http://elliotec.com/grass-is-always-greener/</id>
    <published>2016-08-24T11:36:00-06:00</published>
    <updated>2016-12-04T02:25:16-07:00</updated>
    <author>
      <name>Michael Elliott</name>
    </author>
    <content type="html">&lt;h1&gt;&amp;ldquo;Dream Gig&amp;rdquo;&lt;/h1&gt;

&lt;p&gt;At the beginning of this year, I was managing a software team on a project that was&amp;hellip; less than significant in the eyes of myself and most of the company I was working for. The business owner was by all accounts terrible, and the dev team did not have clear requirements and had a lot of time sitting on their hands waiting for orders that were yet to come.&lt;/p&gt;

&lt;p&gt;I was feeling burned out working on a lame project and having little to do but deflect annoying micromanagement from my dev team, when what seemed like a fantastic opportunity arose from my network. It was kind of a dream gig - an opportunity teaching my skills as an engineering instructor for one of the largest code schools in the nation which was just entering our city.&lt;/p&gt;

&lt;p&gt;It seemed perfect - I had always loved teaching and had done so in some capacity since beginning to code professionally. They were offering a 20% salary increase to what I was at, with great benefits and a month off every three months, with the addition of &amp;ldquo;unlimited PTO&amp;rdquo; (a trap and a racket, as most people have found out now). They promised only one travel per year for the all hands conference, and were in the middle of remodeling a new space in a building a short bike ride from where I lived. It seemed a little to good to be true.&lt;/p&gt;

&lt;h1&gt;If it seems to good to be true, it probably is&lt;/h1&gt;

&lt;p&gt;I got hired in mid March, with the intention that I&amp;rsquo;d start teaching at the end of March. I thought I had 2 weeks to write my curriculum, and did it frantically knowing I&amp;rsquo;d have to adjust to the students needs&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>horizontal</title>
    <link rel="alternate" href="http://elliotec.com/horizontal/"/>
    <id>http://elliotec.com/horizontal/</id>
    <published>2016-06-10T21:40:00-06:00</published>
    <updated>2016-12-04T02:25:16-07:00</updated>
    <author>
      <name>Michael Elliott</name>
    </author>
    <content type="html">&lt;p&gt;Gotta do a modern full-stack JS app.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;install node 4 and npm 3&lt;/li&gt;
&lt;li&gt;install rethinkdb&lt;/li&gt;
&lt;li&gt;install horizon&lt;/li&gt;
&lt;li&gt;npm init&lt;/li&gt;
&lt;li&gt;install babel cli and babel-preset-es2015&lt;/li&gt;
&lt;li&gt;npm scripts!&lt;/li&gt;
&lt;li&gt;if can&amp;rsquo;t do babel, do ./node&lt;em&gt;modules/babel-cli/.bin/babel (
if [ -d &amp;ldquo;$PWD/node&lt;/em&gt;modules/.bin&amp;rdquo; ]; then
PATH=&amp;ldquo;$PWD/node_modules/.bin&amp;rdquo;
fi
 )&lt;/li&gt;
&lt;li&gt;install vue&lt;/li&gt;
&lt;li&gt;for eslint had to install each shit globally&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Modules and Monoliths</title>
    <link rel="alternate" href="http://elliotec.com/modules-and-monoliths/"/>
    <id>http://elliotec.com/modules-and-monoliths/</id>
    <published>2016-02-20T20:06:00-07:00</published>
    <updated>2016-12-04T02:25:16-07:00</updated>
    <author>
      <name>Michael Elliott</name>
    </author>
    <content type="html">&lt;p&gt;&lt;em&gt;&amp;ldquo;Jack of all trades, master of none &amp;ndash; though oftentimes better than
master of one.&amp;rdquo; - Someone&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;The Full Stack Developer&lt;/h2&gt;

&lt;p&gt;Those words are met with controversy in the industry.&lt;/p&gt;

&lt;p&gt;A lot of developers are quite annoyed with the term. They argue that it
 isn&amp;rsquo;t possible to be truly full stack, whatever their definition of
 &amp;ldquo;truly&amp;rdquo; might be.&lt;/p&gt;

&lt;p&gt;They believe that mastery of a specific skill set within a software
stack is more valuable than being decent at all of it. This can be true,
especially in large corporations and enterprise systems with hundreds of
developers that are assigned specific tasks and siloed by their
specialization.&lt;/p&gt;

&lt;p&gt;Mastering one specific language or piece of the stack certainly has many
benefits. Masters of JavaScript have tons of knowledge about the quirks of
the language and clever ways to get complex UIs to do their and the user&amp;rsquo;s
bidding. Likewise with DBAs and data architects on the other side;
structuring huge amounts of data and connecting the data by its
relationships is quite an impressive feat.&lt;/p&gt;

&lt;p&gt;But if the JavaScript master had to analyze and structure and join and
relate tables, she feels out of her element and may seize up citing
ignorance in all things non-JavaScript. The DBA might say, &amp;ldquo;this isn&amp;rsquo;t
SQL.&amp;rdquo; And leave.&lt;/p&gt;

&lt;p&gt;Some people take the love and science of the craft very seriously and
aspire to reach sensei-level software mastery, and think this usually
requires a specialization to get anywhere.&lt;/p&gt;

&lt;p&gt;But looking at examples like David Hienemer Hansson and
hundreds of other startup founders and programming legends, we can see
that gaining that level of knowledge of the full stack is attainable and
accessible and rewarding.&lt;/p&gt;

&lt;p&gt;People can be modules or monoliths. Many choose specialization and corner themselves as &amp;ldquo;JavaScript Developers&amp;rdquo; or &amp;ldquo;Rails Developers.&amp;rdquo; My advice is to stay away from this and keep your options open with something like &amp;ldquo;software developer,&amp;rdquo; highlighting your experience in your preferred fields without removing yourself from opportunities to grow and gain new technical skills.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://dilbertblog.typepad.com/the_dilbert_blog/2007/07/career-advice.html"&gt;Some of the best career advice I&amp;rsquo;ve read came from Scott Adams which says that in order to become extraordinary, you have two paths:&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Become the best at one specific thing.&lt;/li&gt;
&lt;li&gt;Become very good at two or more things.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The first is almost impossible, so I&amp;rsquo;ll be sticking to the second.&lt;/p&gt;

&lt;p&gt;People often tout the &amp;ldquo;T-shaped&amp;rdquo; metaphor for one&amp;rsquo;s skill levels,
meaning that they have expertise in a vertical and the horizontal is the
broad but lesser knowledge of other disciplines. I agree with this, and
don&amp;rsquo;t see why it can&amp;rsquo;t be more common for someone to have an engineering
vertical with for example, a strong business/operations/etc. horizontal.
It&amp;rsquo;s definitely a thing, tons of successful founders of companies do
exactly that. So why are the developers in the front end community
isolating themselves into their own little specializations and modules
that they spend lots of time learning and configuring?&lt;/p&gt;

&lt;h2&gt;The Full Stack Framework&lt;/h2&gt;

&lt;p&gt;This is why I still love &lt;a href="http://rubyonrails.org"&gt;Ruby on Rails&lt;/a&gt;, which turned 10 this year.&lt;/p&gt;

&lt;p&gt;Rails created a layer of abstraction that eliminated much of
the monotony, repetition, and difficult integrations that web development
requires. Building, integrating, and distributing packages of
functionality (gems) became a breeze. It made developing rich applications
on the web much more accessible to people with or without programming
skills, and drastically increased the speed of doing so.&lt;/p&gt;

&lt;p&gt;I hear a lot of people that don&amp;rsquo;t like Rails give their primary reason for disliking it as &amp;ldquo;It&amp;rsquo;s just too much magic.&amp;rdquo; What the hell is that supposed to mean!? Who doesn&amp;rsquo;t love magic? Why would you want to waste time configuring things and wiring up stuff under the hood when you can scaffold and ship a product much sooner? Rails was built to remove the repetition of common architecture patterns, and did it very well. It baffles me that people want to redo this because they&amp;rsquo;re afraid of &amp;ldquo;magic.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;You still have to know a bit of HTML, CSS, and JavaScript to get your way
around Rails, but you can take shortcuts with those too, like templating
with ERB, using CSS frameworks like Bootstrap or &lt;a href="http://refills.bourbon.io"&gt;Thoughtbot&amp;rsquo;s Refills&lt;/a&gt;, and
of course jQuery, which has become startlingly rejected recently by a lot
of the JavaScript community.&lt;/p&gt;

&lt;p&gt;Some proponents of the full stack JavaScript world are attracted to the
&amp;ldquo;one language to rule them all&amp;rdquo; idea, but most implementations of JS
frameworks lack any structure or standardization or convention and take so
much time to configure that shipping a product is arduous. (If you like
the idea of developing entirely in one language, I recommend looking into
Clojure and Luminus which is fast and expressive and uses some
awesome truly full-stack patterns).&lt;/p&gt;

&lt;p&gt;&lt;a href="http://emberjs.com/"&gt;Ember&lt;/a&gt; is an outlier here, and deserves credit for taking a lot of the good ideas Rails popularized and put it in a JS framework with an amazing CLI tool. But unfortunately they don&amp;rsquo;t have marketing expert giants like Facebook (for React) or Google (for Angular) pushing the Ember framework, so naturally it gets pushed aside.&lt;/p&gt;

&lt;p&gt;Stuff like Ember and &lt;a href="http://yeoman.io"&gt;Yeoman&lt;/a&gt; ease the pain a little bit sometimes, but the
fragmentation and the dramatic fiasco that has become of the
JavaScript framework/library/etc world is becoming a defining characteristic of the community. These frameworks inaccessibility often require
that one be an expert just in JavaScript in order to properly implement. Why?&lt;/p&gt;

&lt;p&gt;Full stack development is really just combining the concepts of
&amp;ldquo;standing on the shoulders of giants&amp;rdquo; and &lt;a href="http://fourhourworkweek.com/2014/08/25/the-art-of-strategic-laziness/"&gt;&amp;ldquo;strategic laziness.&amp;rdquo;&lt;/a&gt; We take what we&amp;rsquo;ve learned from the past, and use it to strategically avoid decisions that have already been made and proven by people smarter than us.&lt;/p&gt;

&lt;h2&gt;Effort For its Own Sake&lt;/h2&gt;

&lt;p&gt;Many JavaScript frameworks are implementing patterns like MV-star or MVVM
. They take the solid tried and true MVC pattern that most developers are
familiar with and start scrambling up the acronyms and implementing them
poorly and without conventions (I know MVVM was created before the JS
frameworks, but the creator of the pattern has himself criticized it as
a bad idea for these UI implementations).&lt;/p&gt;

&lt;p&gt;Why are we spending time re-inventing the wheel under the guise of
innovation and re-solving solved problems for its own sake?&lt;/p&gt;

&lt;p&gt;SQL is another example. The problem of organizing data rationally and querying it
was solved decades ago, and any worthy modern framework can interact with
this data and create rich APIs if need be.&lt;/p&gt;

&lt;p&gt;Yet the hot shit these days is NoSQL, which shuns decades of work for &lt;a href="http://www.sarahmei.com/blog/2013/11/11/why-you-should-never-use-mongodb/"&gt;a
markedly worse solution&lt;/a&gt;. This trend is very limiting, and any SQL DB can produce JSON anyway, so what is the point?&lt;/p&gt;

&lt;h2&gt;Servers are our friends&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://ponyfoo.com/articles/stop-breaking-the-web"&gt;Single Page Apps are almost never necessary.&lt;/a&gt;
 Your users don&amp;rsquo;t care about two-way data
binding or one-way data flow. I promise. Neither does your pointy-haired boss.
They care that the data they are getting or posting is getting got or posted.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Isomorphic&amp;rdquo; (which is quite a pretentious word for running on the client and server) JavaScript is an idea that removes the logical separation of client and server so that all the code is tightly coupled and stored together in a repo. This is an interesting solution to the problem that we are now having with SPAs bloating up and slowing down the browser by running the code through the server first and templating. This is, on the surface, a trend toward the monolithic architecture I&amp;rsquo;m touting in this article.&lt;/p&gt;

&lt;p&gt;But, really it&amp;rsquo;s roundabout, difficult to implement, and adding complexity when we should be removing it. Like, how about just not using too much JS on the client and minimizing requests? People say it helps with SEO, but Google now crawls pages that are generated with JS, at least supposedly. If you want better SEO, don&amp;rsquo;t render all your content with JavaScript.&lt;/p&gt;

&lt;p&gt;Data and content should be submitted and displayed by the client, and manipulated and stored on the server. This has worked well, and will continue to work well for the foreseeable future. Just sprinkle in the JS that is needed to make you&amp;rsquo;re app interactive and pretty and things will move along nicely.&lt;/p&gt;

&lt;h2&gt;Over-modularization&lt;/h2&gt;

&lt;p&gt;The Unix philosophy of &amp;ldquo;Do one thing and do it well&amp;rdquo; has been repeated to the point of overuse in the community, especially surrounding the React ecosystem. So React does the view layer well. Redux does the data flow well. Webpack does package management well, and Gulp or NPM scripts do build process well. And so on and so forth.&lt;/p&gt;

&lt;p&gt;Well, Rails has many components that do their respective pieces well. Active Record does ORM and data handling &lt;em&gt;very&lt;/em&gt; well. ActionMailer does email well. The asset pipeline does asset management well. And so on and so forth.&lt;/p&gt;

&lt;p&gt;But guess what? Ruby on Rails does one thing, and one thing well, and that&amp;rsquo;s &lt;em&gt;full-stack web development&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s also important to remember that Unix is a family of operating systems. Operating systems do many things, and do them well. One off the top of my head might be system operation. But each of the components do their own thing well to make the monolith of Unix the magical beast that it is.&lt;/p&gt;

&lt;p&gt;Microservices, containers, and &amp;ldquo;anti-monolithic&amp;rdquo; approaches to
architecture make sense occasionally, like when you work for Netflix or
Spotify and have teams churning out features at enormous scale that needs
multi-threaded asynchronous load balancing and all the jazz.&lt;/p&gt;

&lt;p&gt;But unless you&amp;rsquo;re a specialist in whichever micro piece of the stack and
are sticking to it(or if you&amp;rsquo;re an architect and setting this stuff up is
your specialty), this type of architecture is daunting and will
unquestionably turn into an unmaintainable spaghetti mess.&lt;/p&gt;

&lt;p&gt;The fact is we are over-modularizing things. Every time I start a new JS
project, I feel like I just moved into a new house with nothing but
a screwdriver and a few thousand dollars worth of Ikea furniture -I&amp;rsquo;m
excited so I tear open the boxes and get started but building the couch
seems more fun than the bookcase and I just stripped all the screws of the
wardrobe which was too heavy to lift by myself anyway and I really should
start on my desk so I can build a computer to put on it and now I lost
that screwdriver. Before I know it, I have a room full of shredded
cardboard under a pile of partly-assembled furniture and the rest of the
house is still empty.&lt;/p&gt;

&lt;p&gt;What if I had the option of walking into my house totally furnished to my
exact specifications and expectations at no extra cost?&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s what I think of as what some folks like to call &amp;ldquo;monoliths.&amp;rdquo; I&amp;rsquo;m
fine with that word. If convention means monolith than I prefer monoliths
over modules, and I think it&amp;rsquo;s odd that so many developers want to be so
contrarian about it. I get the whole rebel spirit of the industry and
engineering culture, but historically it hasn&amp;rsquo;t been such a hodgepodge - it has continually moved towards conventions and layers of abstraction, so
we can be more effective and efficient and get on with innovating (or in
most of our cases, selling something).&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t want to have containers containing NoSQL interacting with
modularized libraries inside their own containers. It&amp;rsquo;s gonna be slow to
develop, and slow to load. I want a monolith that I can spend more time on
making it do a better job at what it is and ship the damn thing.&lt;/p&gt;

&lt;p&gt;Doing a project in React has such a huge learning curve and the sheer
amount of modules and libraries one must connect and configure makes my
head spin. There are seemingly infinite combinations of libraries and
newest things you must know to &lt;a href="http://mir.aculo.us/2015/08/25/how-to-actually-ship-software-that-actually-works/"&gt;actually ship something.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/@ericclemmons/javascript-fatigue-48d4011b6fc4#.s12704ins"&gt;Some people love this constant stream of new stuff and learning, but even
they are feeling the exhaustion.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My buddy shaine put it well -&lt;/p&gt;

&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;Is there a way to just skip over react/webpack/es6 to the next big thing? I love those things, but theoretically I love the next thing more.&lt;/p&gt;&amp;mdash; Shaine Hatch (@ShaineHatch) &lt;a href="https://twitter.com/ShaineHatch/status/643468259375714304"&gt;September 14, 2015&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;It&amp;rsquo;s okay to love new things and be hungry for more learning, but I do
believe that the lack of structure, conventions, and opinionated-ness is crippling
the potential of what we can do, especially in the JS community. Not to mention
the insane additions of features in
ES6/ES2018/ES-whatever-we&amp;rsquo;re-calling-it-now.&lt;/p&gt;

&lt;h2&gt;Lets go back to convention over configuration.&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://medium.com/@wob/the-sad-state-of-web-development-1603a861d29f#.65e9l1sie"&gt;The chaos of the ultra-modularized JavaScript (and relatives) community&lt;/a&gt; can be solved by
coming together to develop some order and re-use, so we can use
conventions that are shared by most instead of connecting and configuring
one library after another to re-solve solved problems. Developers are not
happy with this churn fatigue, and users are getting shittier experiences
from it.&lt;/p&gt;

&lt;p&gt;Maybe the full-stack naysayers are saying nay because they have spent so
much time specializing on their thing that they find it impossible to be
as good at doing all the things. If we standardized some conventions, more
of us would be able to specialize on the entire stack, but only because we
are really specializing on the layer of abstraction that does all the
full-stack stuff.&lt;/p&gt;

&lt;p&gt;We in the &lt;a href="http://www.breck-mckye.com/blog/2014/12/the-state-of-javascript-in-2015/"&gt;current state of the JS world&lt;/a&gt; are lacking the glue that holds the modules that make a magnificent, magical monolith. I&amp;rsquo;m talking about the ridiculous steps of getting all the moving pieces to work together. Let&amp;rsquo;s come up with ways to fix it.&lt;/p&gt;

&lt;p&gt;Undoubtedly a large percentage of you reading this will say, &amp;ldquo;If you don&amp;rsquo;t like
it fork it, fix it, or make a better one.&amp;rdquo; But not only do I have no desire
whatsoever to do that, I also believe this mentality is possibly the biggest
contributor to the &lt;a href="https://xkcd.com/927/"&gt;clusterfuckification of the community&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m ranting, but I&amp;rsquo;m also here to offer solutions. People need to stop making
JS frameworks, and people also need to stop writing self contained libraries
that don&amp;rsquo;t conform to any standard but their own. Follow the examples of Rails
and Django, and SpringMVC and even jQuery. Let&amp;rsquo;s just come together to pick a framework with a high level of abstraction, so we can make the magic happen by piggybacking on the magic the frameworks provide. &lt;a href="http://blog.circleci.com/its-the-future/"&gt;It&amp;rsquo;s the future.&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Teach Your Skills for Fun and Profit</title>
    <link rel="alternate" href="http://elliotec.com/teach-your-skills-for-fun-and-profit/"/>
    <id>http://elliotec.com/teach-your-skills-for-fun-and-profit/</id>
    <published>2015-11-10T13:49:00-07:00</published>
    <updated>2016-12-04T02:25:16-07:00</updated>
    <author>
      <name>Michael Elliott</name>
    </author>
    <content type="html">&lt;h2&gt;An age old concept&lt;/h2&gt;

&lt;p&gt;What do Alton Brown, Tim Ferris, Bob Vila, and Ryan Bates all have in common? You guessed it, they all made a small (or large) fortune off teaching the skills of their trade. They weren&amp;rsquo;t teachers initially, they were just pretty good at what they did, and thought teaching others what they knew could be beneficial to all parties. And it was.&lt;/p&gt;

&lt;p&gt;Teaching your skills at any level can sharpen them dramatically and make you a decent side income. Longer term you may find it makes you more than a decent side income, and teaching becomes a skill in itself.&lt;/p&gt;

&lt;p&gt;It has never been a secret that teaching is a great way to learn. The ancient Roman philosopher Seneca stated that, &amp;ldquo;While we teach, we learn&amp;rdquo;, two millennia ago. European schools started to have some version of teaching assistants or student teachers around the end of the 18th century.&lt;/p&gt;

&lt;p&gt;There have been more &lt;a href="https://en.wikipedia.org/wiki/Learning_by_teaching#The_LdL_approach"&gt;recent pedagogic techniques&lt;/a&gt; focused specifically on having students teach to learn based on research that teaching is, in fact, the &lt;em&gt;best&lt;/em&gt; way to learn.&lt;/p&gt;

&lt;p&gt;&lt;img src="../images/learning_pyramid.png"/&gt;&lt;/p&gt;

&lt;h2&gt;Gaining expertise&lt;/h2&gt;

&lt;p&gt;In his book &lt;a href="http://fourhourworkweek.com"&gt;&amp;ldquo;The 4-Hour Workweek,&amp;rdquo;&lt;/a&gt; Tim Ferris famously (and controversially) outlines how to be come an expert in anything in four weeks and six steps. Read the book if you want to know each step, but let me give you a hint: at least half of them involve teaching.&lt;/p&gt;

&lt;p&gt;Think about the times you&amp;rsquo;ve had to give presentations. It&amp;rsquo;s likely that you started out methodically when you found out you were going to do it, only to find yourself scrambling the night before and doing it in a few hours college-thesis-style. But you still learned a ton! Certainly more than the people that you were presenting for.&lt;/p&gt;

&lt;p&gt;Turns out, &lt;a href="http://link.springer.com/article/10.3758%2Fs13421-014-0416-z"&gt;studies show&lt;/a&gt; that even &lt;em&gt;being told&lt;/em&gt; you will have to teach a concept later improves learning and recall significantly. Maybe those of us with high willpower can trick ourselves into this, but I recommend actually putting yourself in a teaching situation to get the full effect.&lt;/p&gt;

&lt;h2&gt;Tricking ourselves&lt;/h2&gt;

&lt;p&gt;We trick ourselves all the time into thinking we are learning. It&amp;rsquo;s quite a conundrum - how can we have a full grasp of an idea when we don&amp;rsquo;t know what we don&amp;rsquo;t know?&lt;/p&gt;

&lt;p&gt;As &lt;a href="http://artofproblemsolving.com/articles/learning-through-teaching"&gt;Richard Rusczyk says&lt;/a&gt;, &amp;ldquo;Teaching removes this possibility of self-deceit.&amp;rdquo; This happens both by us preemptively gathering more information and knowledge in anticipation of our student&amp;rsquo;s lack of understanding or questions, and also by being put on the spot by those which were not anticipated at the time of teaching.&lt;/p&gt;

&lt;p&gt;Teaching also happens to be an excellent cure for an endemic of the tech world: &lt;a href="https://en.wikipedia.org/wiki/Impostor_syndrome"&gt;Impostor Syndrome&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Start teaching when you start learning&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://elliotec.com/how-i-got-a-job-in-web-development"&gt;In an earlier post&lt;/a&gt;, I laid out the steps I took in getting a job in my current field of web/software development. It is notable that quite early in the process, I was getting paid to teach people what I had been learning, almost in tandem. I recall my instructor at the bootcamp I was enrolled in mention something in passing about learning by teaching and I really took it to heart.&lt;/p&gt;

&lt;p&gt;I started a gig as a personal tutor for a Computer Science grad student at UW in Ruby on Rails before finishing the course, and then was an assistant instructor for the following bootcamp after mine. I believe these two jobs were an early immunization for the impostor syndrome I may have had if I didn&amp;rsquo;t do them. It might have been a little too far on the ego boost, but thats another problem.&lt;/p&gt;

&lt;p&gt;Point is, I started teaching for purely selfish reasons - &lt;a href="https://www.youtube.com/watch?v=2Nx-sH0kn6E"&gt;make money, and get learnt&lt;/a&gt;. (sorry)&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s not to say I haven&amp;rsquo;t had lots of rewarding experiences teaching what I do. I was surprised at the amount of attention my post on how I got my job was getting, and how many folks emailed me that it was an inspiration boost, or they got into a course they&amp;rsquo;ve been excited about, or they got their dream job, etc. Knowing you&amp;rsquo;ve helped someone achieve something is a sweet feeling.&lt;/p&gt;

&lt;p&gt;And I guarantee I learned more than my audience just by writing that.&lt;/p&gt;

&lt;h2&gt;&amp;ldquo;I know that I know nothing&amp;rdquo;&lt;/h2&gt;

&lt;p&gt;Since then, I&amp;rsquo;ve started working as a mentor for &lt;a href="http://thinkful.com"&gt;Thinkful&lt;/a&gt; on the weekends. This, plus being the development lead of a team at my full time spot gives me plentiful teaching, and therefore learning, opportunities.&lt;/p&gt;

&lt;p&gt;I am consistently stumped by questions my students and teammates ask me. Sometimes it feels good when they have an easy question that I&amp;rsquo;m well prepared for, but that is rarely the case. More often, I&amp;rsquo;ll have to look up pieces of answers and help them and myself connect the dots.&lt;/p&gt;

&lt;p&gt;Surprise! Thats what I do in my real life job anyway!&lt;/p&gt;

&lt;p&gt;So, if you&amp;rsquo;re a blossoming developer or recent grad that is stuck in the awful, seemingly infinite loop of, &amp;ldquo;I need experience to get a job to get experience so I can get a job,&amp;rdquo; like me and so many have been in the past, try your hand at teaching. Some good places to start would be TA-ing for some classes, private tutoring, or even just blogging.&lt;/p&gt;

&lt;p&gt;Or, if you&amp;rsquo;ve got tons of experience and are feeling a bit stale on your skills or just plain bored, try teaching! Some good places to start could be assisting at a university, private teaching facility like bootcamps, blogging, or best of all, be a true mentor for someone.&lt;/p&gt;

&lt;p&gt;A true mentorship experience is hard to find without contriving it, but I have had some unbelievable mentors in my life that have been far more influential than they know, and have shaped me and my character immensely. I strive to be that person for someone else someday, but I may not even know it if it happens.&lt;/p&gt;

&lt;p&gt;Being a teacher implies mastery of the subject even though to be a decent teacher you must acknowledge that the more you know, the more you realize you know very little.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s usually humbling. It&amp;rsquo;s often lucrative. And it&amp;rsquo;s always going to be a better learning experience for you than your student.&lt;/p&gt;

&lt;h3&gt;Other references and sources&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Learning_by_teaching#The_LdL_approach"&gt;The LdL Approach&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.nde-ed.org/TeachingResources/ClassroomTips/Constructivist%20_Learning.htm"&gt;Constructivist Learning&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://lifehacker.com/teach-others-what-you-know-to-make-connections-and-lear-1639560273"&gt;Teach what you know&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://ideas.time.com/2011/11/30/the-protege-effect/"&gt;The Protoge Effect&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.sciencedirect.com/science/article/pii/S0160289607000062"&gt;Birth Order and Intelligence&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.agent4change.net/grapevine/platform/1646-i-learn-more-by-teaching-than-learning-gavin-dykes.html"&gt;I learn more by teaching than learning&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://ww2.kqed.org/mindshift/2015/09/14/lesson-study-technique-what-teachers-can-learn-from-one-another/"&gt;Lesson Study Technique&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
</feed>
